/**
 * Giliam de Carpentier, Copyright (c) 2007. 
 * Licensed under the Simplified BSD license. 
 * See Docs/ScapeLicense.txt for details.
 */
 
#define PACK_IN 565 // 3232: 2x32-bits float, 565: 1x16-bit in R5G6B6, 8888: 2x16-bit in R8G8B8A8
#define PACK_OUT 565 // 3232: 2x32-bits float, 565: 1x16-bit in R5G6B6, 8888: 2x16-bit in R8G8B8A8


// ----------------------------------------------------------------------------
float4 packFormat(float2 values)
{
  #if PACK_IN == 8888 // pack two 16-bit channels to A8R8G8B8 (second channel has not yet been tested)
    const float4 factors = {256.0f, 1.0f, 256.0f, 1.0f};
    return floor(frac(values.yxxy * factors) * 256.0f) / 255.0f; // first channel (16-bit G) consists of 8-bit MSB G and 8-bit LSB B

  #elif PACK_IN == 565 // pack one 16-it channel to R5G6B5
    const float3 scales = {1.0f, 32.0f, 2048.0f};
    const float3 ranges = {32.0f, 64.0f, 32.0f};
    const float3 maxs = {31.0f, 63.0f, 31.0f};
    return float4(floor(frac(values.x * scales) * ranges) / maxs, 0);

  #else // no translation needed
    return float4(values, 0, 0);
  #endif
}


// ----------------------------------------------------------------------------
float2 unpackFormat(float4 pck)
{
  #if PACK_OUT == 8888 // unpack A8R8G8B8 to two 16-bit channels
    const float4 factors = {1.0f/65536.0f, 1.0f/256.0f, 1.0f/65536.0f, 1.0f/256.0f};
    pck = round(pck * 255.0f) * factors;
    return pck.ya + pck.zr;

  #elif PACK_IN == 565 // pack one 16-it channel to R5G6B5
    const float3 maxs = {31.0f, 63.0f, 31.0f};
    const float3 scales = {8.0f, 1.0f / 8.0f, 1.0f / 256.0f};
    return dot(round(pck.rgb * maxs), scales) / 256.0f;

  #else // no translation needed
    return pck.xy;
  #endif
}
