/**
 * Giliam de Carpentier, Copyright (c) 2007. 
 * Licensed under the Simplified BSD license. 
 * See Docs/ScapeLicense.txt for details.
 */
 
#include "pack.cgh"
#include "noise.cgh"

// ----------------------------------------------------------------------------
float perlinTurbulence(float2 p, float2 pdistort, float4x4 octaveAmps, int seed, uniform int octaves, float lacunarity = 2.0, uniform sampler2D samplerPerlinPerm2D, uniform sampler2D samplerPerlinGrad2D)
{
  float sum = 0;
  float freq = 1.0;
  for(int i=0; i < octaves; i++)
  {
    float amp = octaveAmps[i/4][i%4];
    float n = perlinNoise((p+pdistort*amp)*freq, seed + i, samplerPerlinPerm2D, samplerPerlinGrad2D);
    sum += n * amp;
    freq *= lacunarity;
  }
  return sum;
}



// ----------------------------------------------------------------------------
float2 distortTurbulence(float2 p, uniform float4x4 octaveAmps, int seed, float4 noiseTransform, uniform int octaves, float lacunarity = 2.0, uniform sampler2D samplerPerlinPerm2D, uniform sampler2D samplerPerlinGrad2D)
{
  float2 sum = 0;
  float freq = 1.0, amp = 1.0;
  for(int i=0; i < octaves; i++)
  {
    amp = octaveAmps[i/4][i%4];
    float nx = transformNoise(p*freq, seed + i, noiseTransform, samplerPerlinPerm2D, samplerPerlinGrad2D);
    float ny = transformNoise(p*freq, seed + i + 50, noiseTransform, samplerPerlinPerm2D, samplerPerlinGrad2D);
    float2 n = float2(nx, ny);
    sum += n * amp;
    freq *= lacunarity;
  }
  return sum;
}


// ----------------------------------------------------------------------------
void main_fp
(
  in float2           iCoord                : TEXCOORD0,
  out float4          oColor                : COLOR,
  uniform sampler2D   samplerC              : TEXUNIT0,
  uniform sampler2D   samplerPerlinPerm2D   : TEXUNIT1,
  uniform sampler2D   samplerPerlinGrad2D   : TEXUNIT2,

  uniform float4      coordTransformC,
  uniform float4      brushShape,
  uniform float4      brushTransform[16],
  uniform float4      brushDirection[16],
  uniform float3      heightScale,
  uniform float4      brushParams,

  uniform float4x4    noiseOctaveAmps,
  uniform float4x4    distortOctaveAmps,
  uniform float4      noiseTrans,
  uniform float4      directionTrans,
  uniform float4      distortFunc,
  uniform float4      scales,
  uniform float4      lacunarity,
  uniform float4      seeds

)
{
  float2 pixCoord = iCoord * coordTransformC.xy + coordTransformC.zw;

  float height = unpackFormat(tex2D(samplerC, pixCoord)).x;

  for(int k = 0; k < 8; k++)
  {
    float4 transform = brushTransform[k];
    float2 deltaXZ = iCoord - transform.xz;
    float amp = dot(deltaXZ, deltaXZ);
    float weight = transform.w * saturate(brushShape.x + brushShape.y * pow(amp, brushShape.z));

    float2 directionDistort = brushDirection[k].x * directionTrans.xy + brushDirection[k].y * directionTrans.zw;

    float2 distort = distortTurbulence(noiseTrans.y * iCoord, distortOctaveAmps, seeds.x, distortFunc, 10, lacunarity.x, samplerPerlinPerm2D, samplerPerlinGrad2D);
    float2 coord = noiseTrans.x * (iCoord - dot(directionDistort, iCoord) * directionDistort);

    float add = 0.5 * perlinTurbulence(coord + distort * scales.x, distort * scales.y, noiseOctaveAmps, seeds.y, 10, lacunarity.x, samplerPerlinPerm2D, samplerPerlinGrad2D);

    float positive = scales.z * (abs(add) + add);
    float negative = scales.w * (abs(add) - add);
    add = positive - negative;

    height += add * weight;

  }

  height = clamp(height, 0, 65535.0f/65536.0f);
  oColor = packFormat(float2(height,0));
}
