/**
 * Giliam de Carpentier, Copyright (c) 2007. 
 * Licensed under the Simplified BSD license. 
 * See Docs/ScapeLicense.txt for details.
 */
 
// Vertex program
void main_vp
(
  float4              iPosition           : POSITION,
  float2              iUVCoord            : TEXCOORD0,

	out float4          oPosition           : POSITION,
	out float4          oUnitQuadPos        : TEXCOORD0,
//	out float4          oDiffuseColor       : TEXCOORD1,
	out float3          oNormalDotYDist     : TEXCOORD2,
	out float3          oNormal             : TEXCOORD3,

	uniform float4x4    worldViewProj,
	uniform float3      localCameraPos,
	uniform float4      unitQuadScale,
	uniform float4      unitQuadBias,
	uniform float4      localPosScale,
	uniform float4      localPosBias,
	uniform float4      gradientScaleBias,
	uniform float4      lightDirection,
	uniform float4      brushPosRamp

)
{
  oUnitQuadPos = float4(iUVCoord.x, iPosition.x, iUVCoord.y, 1) * unitQuadScale + unitQuadBias;

  float3 gradient = float3(iPosition.y * gradientScaleBias.x, 0, iPosition.z * gradientScaleBias.x);
  float3 normalMul = normalize(float3(gradient.x * lightDirection.w, 1, gradient.z * lightDirection.w));
  oNormal = normalize(float3(gradient.x, 1, gradient.z));
  float4 localPosition = oUnitQuadPos * localPosScale + localPosBias;
  oPosition = mul(worldViewProj, localPosition);

  float2 relBrushCenter = oUnitQuadPos.xz - brushPosRamp.xy;
  float brushStrength = dot(relBrushCenter, relBrushCenter) * brushPosRamp.z + brushPosRamp.w;
  oUnitQuadPos.w = brushStrength;

  oNormalDotYDist.x = length(gradient);
  oNormalDotYDist.y = min(1 / length(localCameraPos - localPosition.xyz), 1);
  oNormalDotYDist.z = clamp(dot(normalMul, lightDirection), 0, 1);

//  oPosition += float4(normalize(oNormal * float3(1.0, 0.001, 1.0)).xyz,0) * -(oPosition.y - 200) * 0.5;

}


// Fragment program
void main_fp
(
  float4              iUnitQuadPos     : TEXCOORD0,
//float4              iDiffuseColor    : TEXCOORD1,
  float3              iNormalDotYDist  : TEXCOORD2,
  float3              iNormal          : TEXCOORD3,

  out float4          oColor		       : COLOR,

  uniform float4      isoScales,
  uniform float4      isoDotScales,
  uniform float2      uvScaleGlobal,
  uniform float4      uvScaleLocal,
  uniform float4      layerHeightScale,
  uniform float4      layerHeightBias,
  uniform float4      layerSlopeScale,
  uniform float4      layerSlopeBias,
  uniform float4x4    layerHeightDistort,
  uniform float4      intensityScaleGlobal,
  uniform float4      fogColor,
  uniform float4      sunColor,
  uniform float4      skyColor,
  uniform float4      brushColor,

  uniform sampler2D   samplerNoise: TEXUNIT0,
  uniform sampler2D   samplerLevel0: TEXUNIT1,
  uniform sampler2D   samplerLevel1: TEXUNIT2,
  uniform sampler2D   samplerLevel2: TEXUNIT3,
  uniform sampler2D   samplerLevel3: TEXUNIT4
)
{
  float3 color;

  #ifdef MULTIPROJECT

    float3 lerpWeightsNorm = iNormal * iNormal;
    lerpWeightsNorm /= lerpWeightsNorm.x + lerpWeightsNorm.y + lerpWeightsNorm.z;

    float4 globalColor = tex2D(samplerNoise, iUnitQuadPos.yz * uvScaleGlobal) * lerpWeightsNorm.x +
                         tex2D(samplerNoise, iUnitQuadPos.xz * uvScaleGlobal) * lerpWeightsNorm.y +
                         tex2D(samplerNoise, iUnitQuadPos.xy * uvScaleGlobal) * lerpWeightsNorm.z;

  #else // MULTIPROJECT

    float4 globalColor = tex2D(samplerNoise, iUnitQuadPos.xz * uvScaleGlobal);

  #endif // MULTIPROJECT

  float4 distortion = mul(layerHeightDistort, (globalColor - 0.5));
  float4 relHeight = iUnitQuadPos.y + distortion;
  float4 lerpWeights = clamp(relHeight * layerHeightScale + layerHeightBias, 0.0, 1.0);
  float4 lerpWeights2 = clamp((distortion.w + iNormalDotYDist.x) * layerSlopeScale + layerSlopeBias, 0.0, 1.0);
  lerpWeights = lerpWeights * lerpWeights2;

  #ifdef MULTIPROJECT

    float2 texCoordX = iUnitQuadPos.yz * uvScaleLocal.xy;
    float2 texCoordY = iUnitQuadPos.xz * uvScaleLocal.xy;
    float2 texCoordZ = iUnitQuadPos.xy * uvScaleLocal.xy;

    color = tex2D(samplerLevel0, texCoordX).rgb * lerpWeightsNorm.x +
            tex2D(samplerLevel0, texCoordY).rgb * lerpWeightsNorm.y +
            tex2D(samplerLevel0, texCoordZ).rgb * lerpWeightsNorm.z ;

    color = lerp(color,
            tex2D(samplerLevel1, texCoordX).rgb * lerpWeightsNorm.x +
            tex2D(samplerLevel1, texCoordY).rgb * lerpWeightsNorm.y +
            tex2D(samplerLevel1, texCoordZ).rgb * lerpWeightsNorm.z,
            lerpWeights.x);

    color = lerp(color,
            tex2D(samplerLevel2, texCoordX).rgb * lerpWeightsNorm.x +
            tex2D(samplerLevel2, texCoordY).rgb * lerpWeightsNorm.y +
            tex2D(samplerLevel2, texCoordZ).rgb * lerpWeightsNorm.z,
            lerpWeights.y);

    color = lerp(color,
            tex2D(samplerLevel3, texCoordX).rgb * lerpWeightsNorm.x +
            tex2D(samplerLevel3, texCoordY).rgb * lerpWeightsNorm.y +
            tex2D(samplerLevel3, texCoordZ).rgb * lerpWeightsNorm.z,
            lerpWeights.z);

  #else // MULTIPROJECT

    float2 texCoord = iUnitQuadPos.xz * uvScaleLocal.xy;

    color = tex2D(samplerLevel0, texCoord).rgb;
    color = lerp(color, tex2D(samplerLevel1, texCoord).rgb, lerpWeights.x);
    color = lerp(color, tex2D(samplerLevel2, texCoord).rgb, lerpWeights.y);
    color = lerp(color, tex2D(samplerLevel3, texCoord).rgb, lerpWeights.z);

  #endif // MULTIPROJECT

  float4 diffuseColor = lerp(skyColor, sunColor, iNormalDotYDist.z);
  color = diffuseColor.rgb * (dot(globalColor, intensityScaleGlobal)) * color;
//color = lerp(fogColor.rgb, color, clamp(fogColor.w * iNormalDotYDist.y * iNormalDotYDist.y, 0.0, 1.0));
  color = lerp(fogColor.rgb, color, exp(-1.0f / (fogColor.w * iNormalDotYDist.y * iNormalDotYDist.y)));

  float rim = 200 * saturate(-iUnitQuadPos.w + 0.1);
  float grad = saturate(iUnitQuadPos.w);
  iUnitQuadPos.w = pow(grad, brushColor.w);
  float4 quadMod = iUnitQuadPos - floor(iUnitQuadPos);

  isoScales = isoScales * iNormalDotYDist.y;
  float4 iso = clamp((0.5 - abs(0.5 - quadMod)) * isoScales, 0.0, 0.5);
  iso.w = 1;
  color = color + dot(iso, isoDotScales) * iNormalDotYDist.y;

  color = lerp(color, brushColor.rgb, 0.5 * (quadMod.w + grad * rim));// * quadMod.w);

  oColor.rgb = color;
  oColor.w = 1.0;
}




