/**
 * Giliam de Carpentier, Copyright (c) 2007. 
 * Licensed under the Simplified BSD license. 
 * See Docs/ScapeLicense.txt for details.
 */
 
#include "pack.cgh"
#include "noise.cgh"

// ----------------------------------------------------------------------------
float perlinTurbulence(float2 p, float2 pdistort, float4x4 octaveAmps, int seed, uniform int octaves, float lacunarity = 2.0, uniform sampler2D samplerPerlinPerm2D, uniform sampler2D samplerPerlinGrad2D)
{
  float sum = 0;
  float freq = 1.0;
  for(int i=0; i < octaves; i++)
  {
    float amp = octaveAmps[i/4][i%4];
    float n = perlinNoise((p+pdistort*amp)*freq, seed + i, samplerPerlinPerm2D, samplerPerlinGrad2D);
    sum += n * amp;
    freq *= lacunarity;
  }
  return sum;
}

// ----------------------------------------------------------------------------
float ridgedTurbulence(float2 p, float2 pdistort, float4x4 octaveAmps, int seed, uniform int octaves, float lacunarity = 2.0, uniform sampler2D samplerPerlinPerm2D, uniform sampler2D samplerPerlinGrad2D)
{
  float sum = 0;
  float freq = 1.0, amp = 1.0;
  for(int i=0; i < octaves; i++)
  {
    amp = octaveAmps[i/4][i%4];
    float n = ridgedNoise((p+pdistort*amp)*freq, seed + i, samplerPerlinPerm2D, samplerPerlinGrad2D);
    sum += n * amp;
    freq *= lacunarity;
  }
  return sum;
}

// ----------------------------------------------------------------------------
float billowedTurbulence(float2 p, float2 pdistort, float4x4 octaveAmps, int seed, uniform int octaves, float lacunarity = 2.0, uniform sampler2D samplerPerlinPerm2D, uniform sampler2D samplerPerlinGrad2D)
{
  float sum = 0;
  float freq = 1.0;
  for(int i=0; i < octaves; i++)
  {
    float amp = octaveAmps[i/4][i%4];
    float n = billowedNoise((p+pdistort*amp)*freq, seed + i, samplerPerlinPerm2D, samplerPerlinGrad2D);
    sum += n * amp;
    freq *= lacunarity;
  }
  return sum;
}

// ----------------------------------------------------------------------------
float iqTurbulence(float2 p, float2 pdistort, float4x4 octaveAmps, int seed, uniform int octaves, float lacunarity = 2.0, uniform sampler2D samplerPerlinPerm2D, uniform sampler2D samplerPerlinGrad2D)
{
  float sum = 0.0;
  float freq = 1.0;
  float2 dsum = float2(0,0);
  for(int i=0; i < octaves; i++) {
    float amp = octaveAmps[i/4][i%4];
    float3 n = noise_pseudo_deriv((p+pdistort*amp)*freq, seed + i, samplerPerlinPerm2D, samplerPerlinGrad2D);
    dsum += n.yz;
    sum += amp * n.x / (1 + dot(dsum, dsum));
    freq *= lacunarity;
  }
  return sum;
}


// ----------------------------------------------------------------------------
float erosion1Turbulence(float2 p, float2 pdistort, float4x4 octaveAmps, int seed, uniform int octaves, float lacunarity = 2.0, uniform sampler2D samplerPerlinPerm2D, uniform sampler2D samplerPerlinGrad2D)
{
  float sum = 0;
  float freq = 1.0;
  float2 dsum = float2(0,0);
  float amp2 = 1;
  float minus = 0;
  for(int i=0; i < octaves; i++)
  {
    float amp = amp2 * octaveAmps[i/4][i%4];
//    float3 n = noise_deriv((p + pdistort*amp * saturate(2*sum)+ 0.15 * dsum)*freq, seed + i, samplerPerlinPerm2D, samplerPerlinGrad2D);
    float3 n = noise_deriv((p + 0.15 * dsum)*freq, seed + i, samplerPerlinPerm2D, samplerPerlinGrad2D);
    n.yz *= -n.x; //Clamp(n.x * -2, -1, 1);
    n.x = 1 - abs(n.x);
    dsum += amp * n.yz;
    sum += amp * n.x;
    freq *= lacunarity;
    amp2 *= saturate(sum) / 0.9;
  }
  return sum - 0.6;
}

// ----------------------------------------------------------------------------
float erosion2Turbulence(float2 p, float2 pdistort, float4x4 octaveAmps, int seed, uniform int octaves, float lacunarity = 2.0, uniform sampler2D samplerPerlinPerm2D, uniform sampler2D samplerPerlinGrad2D)
{
  float3 sum = (0.5,0,0);
  float freq = 1.0;
  float2 dsum = float2(0,0);
  float2 dsumo = dsum;
  float amp2 = 1.0f;
  for(int i=0; i < octaves; i++)
  {
    float amp = amp2 * octaveAmps[i/4][i%4];
    float3 n = noise_deriv((p)*freq, seed + i, samplerPerlinPerm2D, samplerPerlinGrad2D);
    float3 n2 = noise_deriv((p)*freq + 0.01 * n.yz, seed + i, samplerPerlinPerm2D, samplerPerlinGrad2D);

    n.x += 5 * (n.x - n2.x) * (n.x - n2.x);
    n.x *= exp(-dot(n.yz, n.yz));

    dsumo = dsum;
    dsum += amp * n.yz;
    sum += amp * n;
    freq *= lacunarity;
    amp2 *= (1 + 0.02 * dot(n.yz, n.yz));
  }
  return sum.x;
}



// ----------------------------------------------------------------------------
float2 distortTurbulence(float2 p, uniform float4x4 octaveAmps, int seed, float4 noiseTransform, uniform int octaves, float lacunarity = 2.0, uniform sampler2D samplerPerlinPerm2D, uniform sampler2D samplerPerlinGrad2D)
{
  float2 sum = 0;
  float freq = 1.0, amp = 1.0;
  for(int i=0; i < octaves; i++)
  {
    amp = octaveAmps[i/4][i%4];
    float nx = transformNoise(p*freq, seed + i, noiseTransform, samplerPerlinPerm2D, samplerPerlinGrad2D);
    float ny = transformNoise(p*freq, seed + i + 50, noiseTransform, samplerPerlinPerm2D, samplerPerlinGrad2D);
    float2 n = float2(nx, ny);
    sum += n * amp;
    freq *= lacunarity;
  }
  return sum;
}


// ----------------------------------------------------------------------------
void main_fp
(
  in float2           iCoord                : TEXCOORD0,
  out float4          oColor                : COLOR,

  uniform sampler2D   samplerC              : TEXUNIT0,
  uniform sampler2D   samplerMask           : TEXUNIT1,

  uniform sampler2D   samplerPerlinPerm2D   : TEXUNIT2,
  uniform sampler2D   samplerPerlinGrad2D   : TEXUNIT3,

  uniform float4      coordTransformC,

  uniform float4x4    noiseOctaveAmps,
  uniform float4x4    distortOctaveAmps,
  uniform float4      noiseTrans,
  uniform float4      distortTrans,
  uniform float4      distortFunc,
  uniform float4      scales,
  uniform float4      lacunarity,
  uniform float4      seeds

)
{
  float2 pixCoord = iCoord * coordTransformC.xy + coordTransformC.zw;
  float height = unpackFormat(tex2D(samplerC, pixCoord)).x;
  float mask = unpackFormat(tex2D(samplerMask, pixCoord)).x;
  iCoord = noiseTrans.xy * iCoord.x + noiseTrans.zw * iCoord.y;

  float2 distort = distortTurbulence(iCoord, distortOctaveAmps, seeds.x, distortFunc, 12, lacunarity.x, samplerPerlinPerm2D, samplerPerlinGrad2D);
  distort = distortTrans.xy * distort.x + distortTrans.zw * distort.y;

  float add = 0.5 * NOISEFUNC(iCoord + distort * scales.x, distort * scales.y, noiseOctaveAmps, seeds.y, 12, lacunarity.x, samplerPerlinPerm2D, samplerPerlinGrad2D);
//  float add = turbulence_test(iCoord + distort * scales.x, distort * scales.y, 0, 3, 1.5, 0.7, samplerPerlinPerm2D, samplerPerlinGrad2D);


  add = lerp(1.0f, pow(0.5 + add, scales.w) - pow(0.5, scales.w), scales.z);
  height += mask * add;

////  height = 0.4 + 0.15 * NOISEFUNC(iCoord + distort * scales.x, distort * scales.y, noiseOctaveAmps, seeds.y, 6, lacunarity.x, samplerPerlinPerm2D, samplerPerlinGrad2D);

  height = clamp(height, 0, 65535.0f/65536.0f);
  oColor = packFormat(float2(height,0));
}
